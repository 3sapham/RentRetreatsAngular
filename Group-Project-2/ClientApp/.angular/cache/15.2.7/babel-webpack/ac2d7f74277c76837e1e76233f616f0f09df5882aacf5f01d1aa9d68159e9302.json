{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from '@angular/forms';\nlet ReservationformComponent = class ReservationformComponent {\n  constructor(_formbuilder, _router, _route, _reservationService, _houseService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._reservationService = _reservationService;\n    this._houseService = _houseService;\n    this.isEditMode = false;\n    this.isCreateMode = false;\n    this.reservationId = -1;\n    this.houses = [];\n    this.numberOfDays = 0;\n    this.totalPrice = 0;\n    this.currentDate = '';\n    this.checkIn = '';\n    this.checkOut = this.checkIn;\n    this.houseSelectList = this.houses;\n    this.reservationForm = _formbuilder.group({\n      houseId: ['', Validators.required],\n      checkInDate: [this.formatDate(new Date()), Validators.required],\n      checkOutDate: [this.formatDate(new Date()), Validators.required]\n    });\n  }\n  getHouses() {\n    this._houseService.getHouses().subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.houseSelectList = data;\n    });\n  }\n  onSubmit() {\n    console.log(\"ReservationCreate form submitted:\");\n    console.log(this.reservationForm);\n    const newReservation = this.reservationForm.value;\n    if (this.isEditMode) {\n      this._reservationService.updateReservation(this.reservationId, newReservation).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/reservations']);\n        } else {\n          console.log('Reservation update failed');\n        }\n      });\n    } else {\n      this._reservationService.createReservation(newReservation).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/reservations']);\n        } else {\n          console.log('Reservation creation failed');\n        }\n      });\n    }\n  }\n  backToReservations() {\n    this._route.params.subscribe(params => {\n      if (params['view'] === 'Table') {\n        this._router.navigate(['/reservations']);\n      } else if (params['view'] === 'Details') {\n        this._router.navigate(['/reservation-details/' + this.reservationId]);\n      }\n    });\n  }\n  calculateNumberOfDays() {\n    const checkInDateStr = this.reservationForm?.get('checkInDate')?.value;\n    const checkOutDateStr = this.reservationForm?.get('checkOutDate')?.value;\n    if (checkInDateStr && checkOutDateStr) {\n      const checkInDate = new Date(checkInDateStr);\n      const checkOutDate = new Date(checkOutDateStr);\n      if (!isNaN(checkInDate.getTime()) && !isNaN(checkOutDate.getTime())) {\n        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();\n        const numberOfDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        this.numberOfDays = numberOfDays;\n        this.totalPrice = this.chosenHouse?.PricePerNight * numberOfDays;\n      } else {\n        console.error('Invalid date strings');\n      }\n    } else {\n      console.error('Invalid date strings');\n    }\n  }\n  formatDate(date) {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n  loadReservationForEdit(reservationId) {\n    this._reservationService.getReservationById(reservationId).subscribe(reservation => {\n      console.log('retrieved reservation: ', reservation);\n      this.reservationForm.patchValue({\n        houseId: reservation.HouseId,\n        checkInDate: this.formatDate(new Date(reservation.CheckInDate)),\n        checkOutDate: this.formatDate(new Date(reservation.CheckOutDate))\n      });\n      this.changeHouse(reservation.HouseId);\n      this.totalPrice = reservation.TotalPrice;\n      this.checkIn = reservation.CheckInDate;\n      console.log('Total price: ' + this.totalPrice);\n    }, error => {\n      console.error('Error loading reservation for edit:', error);\n    });\n  }\n  changeHouse(houseIdString) {\n    const houseId = +houseIdString;\n    if (!isNaN(houseId)) {\n      this._houseService.getHouseById(houseId).subscribe(house => {\n        this.chosenHouse = house;\n      }, error => {\n        console.error('Error changing houses:', error);\n      });\n    } else {\n      console.error('houseSelect is not a number');\n    }\n  }\n  ngOnInit() {\n    this.getHouses();\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n        this.isCreateMode = true;\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.isCreateMode = false;\n        this.reservationId = +params['id']; // Convert to number\n        this.loadReservationForEdit(this.reservationId);\n      }\n    });\n    this.currentDate = this.formatDate(new Date());\n    this.checkIn = this.currentDate;\n    this.reservationForm.get('checkInDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkIn = this.reservationForm?.get('checkInDate')?.value;\n      const checkInDate = this.reservationForm?.get('checkInDate')?.value;\n      const checkOutDate = this.reservationForm?.get('checkOutDate')?.value;\n      if (checkOutDate < checkInDate) {\n        this.reservationForm.get('checkOutDate')?.setValue(this.checkIn);\n      }\n    });\n    this.reservationForm.get('checkOutDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkOut = this.reservationForm.get('checkOutDate')?.value;\n    });\n  }\n};\nReservationformComponent = __decorate([Component({\n  selector: \"app-reservations-reservationform\",\n  templateUrl: \"./reservationform.component.html\",\n  styleUrls: ['./reservationform.component.css']\n})], ReservationformComponent);\nexport { ReservationformComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","ReservationformComponent","constructor","_formbuilder","_router","_route","_reservationService","_houseService","checkIn","houses","reservationForm","group","houseId","required","checkInDate","formatDate","Date","checkOutDate","getHouses","subscribe","data","console","log","JSON","stringify","houseSelectList","onSubmit","newReservation","value","isEditMode","updateReservation","reservationId","response","success","message","navigate","createReservation","backToReservations","params","calculateNumberOfDays","checkInDateStr","get","checkOutDateStr","isNaN","getTime","timeDiff","numberOfDays","Math","ceil","totalPrice","chosenHouse","PricePerNight","error","date","year","getFullYear","month","getMonth","slice","day","getDate","loadReservationForEdit","getReservationById","reservation","patchValue","HouseId","CheckInDate","CheckOutDate","changeHouse","TotalPrice","houseIdString","getHouseById","house","ngOnInit","isCreateMode","currentDate","valueChanges","setValue","checkOut","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/reservations/reservationform.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ReservationService } from './reservations.service';\nimport { HouseService } from '../houses/houses.service';\nimport { IHouse } from '../houses/house';\n\n@Component({\n  selector: \"app-reservations-reservationform\",\n  templateUrl: \"./reservationform.component.html\",\n  styleUrls: ['./reservationform.component.css']\n})\nexport class ReservationformComponent {\n  reservationForm: FormGroup;\n  isEditMode: boolean = false;\n  isCreateMode: boolean = false;\n  reservationId: number = -1;\n  houses: IHouse[] = [];\n  numberOfDays: number = 0;\n  totalPrice: number = 0;\n  currentDate: string = '';\n  checkIn: string = '';\n  checkOut: string = this.checkIn;\n\n  constructor(\n    private _formbuilder: FormBuilder,\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _reservationService: ReservationService,\n    private _houseService: HouseService\n  ) {\n    this.reservationForm = _formbuilder.group({\n      houseId: ['', Validators.required],\n      checkInDate: [this.formatDate(new Date()), Validators.required],\n      checkOutDate: [this.formatDate(new Date()), Validators.required],\n    });\n  }\n\n  getHouses(): void {\n    this._houseService.getHouses()\n      .subscribe(data => {\n        console.log('All', JSON.stringify(data));\n        this.houseSelectList = data;\n      }\n      );\n  }\n\n  houseSelectList: IHouse[] = this.houses;\n\n  onSubmit() {\n    console.log(\"ReservationCreate form submitted:\");\n    console.log(this.reservationForm);\n    const newReservation = this.reservationForm.value;\n    if (this.isEditMode) {\n      this._reservationService.updateReservation(this.reservationId, newReservation)\n        .subscribe(response => {\n          if (response.success) {\n            console.log(response.message);\n            this._router.navigate(['/reservations']);\n          } else {\n            console.log('Reservation update failed');\n          }\n        });\n    } else {\n      this._reservationService.createReservation(newReservation)\n        .subscribe(response => {\n          if (response.success) {\n            console.log(response.message);\n            this._router.navigate(['/reservations']);\n          }\n          else {\n            console.log('Reservation creation failed');\n          }\n        });\n    }\n  }\n\n  backToReservations() {\n    this._route.params.subscribe(params => {\n      if (params['view'] === 'Table') {\n        this._router.navigate(['/reservations']);\n      } else if (params['view'] === 'Details') {\n        this._router.navigate(['/reservation-details/' + this.reservationId]);\n      }\n    });\n  }\n\n  calculateNumberOfDays() {\n    const checkInDateStr = this.reservationForm?.get('checkInDate')?.value;\n    const checkOutDateStr = this.reservationForm?.get('checkOutDate')?.value;\n\n    if (checkInDateStr && checkOutDateStr) {\n      const checkInDate = new Date(checkInDateStr);\n      const checkOutDate = new Date(checkOutDateStr);\n\n      if (!isNaN(checkInDate.getTime()) && !isNaN(checkOutDate.getTime())) {\n        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();\n        const numberOfDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        this.numberOfDays = numberOfDays;\n        this.totalPrice = this.chosenHouse?.PricePerNight * numberOfDays;\n      } else {\n        console.error('Invalid date strings');\n      }\n    } else {\n      console.error('Invalid date strings');\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n\n  loadReservationForEdit(reservationId: number) {\n    this._reservationService.getReservationById(reservationId)\n      .subscribe(\n        (reservation: any) => {\n          console.log('retrieved reservation: ', reservation);\n          this.reservationForm.patchValue({\n            houseId: reservation.HouseId,\n            checkInDate: this.formatDate(new Date(reservation.CheckInDate)),\n            checkOutDate: this.formatDate(new Date(reservation.CheckOutDate)),\n          });\n          this.changeHouse(reservation.HouseId);\n          this.totalPrice = reservation.TotalPrice;\n          this.checkIn = reservation.CheckInDate;\n          console.log('Total price: ' + this.totalPrice);\n        }, (error: any) => {\n          console.error('Error loading reservation for edit:', error);\n        }\n      );\n  }\n\n  chosenHouse!: IHouse;\n  changeHouse(houseIdString: string) {\n    const houseId: number = +houseIdString;\n    if (!isNaN(houseId)) {\n      this._houseService.getHouseById(houseId)\n        .subscribe(\n          (house: any) => {\n            this.chosenHouse = house;\n          }, (error: any) => {\n            console.error('Error changing houses:', error);\n          }\n        );\n    } else {\n      console.error('houseSelect is not a number');\n    }\n  }\n\n  ngOnInit(): void {\n    this.getHouses();\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; // Create mode\n        this.isCreateMode = true;\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; // Edit mode\n        this.isCreateMode = false;\n        this.reservationId = +params['id']; // Convert to number\n        this.loadReservationForEdit(this.reservationId);\n      }\n    });\n    this.currentDate = this.formatDate(new Date());\n    this.checkIn = this.currentDate;\n    this.reservationForm.get('checkInDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkIn = this.reservationForm?.get('checkInDate')?.value;\n      const checkInDate = this.reservationForm?.get('checkInDate')?.value as Date;\n      const checkOutDate = this.reservationForm?.get('checkOutDate')?.value as Date;\n      if (checkOutDate < checkInDate) {\n        this.reservationForm.get('checkOutDate')?.setValue(this.checkIn);\n      }\n    });\n\n    this.reservationForm.get('checkOutDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkOut = this.reservationForm.get('checkOutDate')?.value;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../authentication/auth.service\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \"Two passwords must match\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"houses\"];\n};\nexport class RegisterComponent {\n  constructor(formBuilder, router, authService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.authService = authService;\n    this.matchingError = false;\n    this.registerForm = formBuilder.group({\n      FirstName: ['', Validators.required],\n      LastName: ['', Validators.required],\n      PhoneNumber: ['', Validators.required],\n      Password: ['', Validators.required],\n      ConfirmPassword: ['', Validators.required],\n      Email: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const providedPassword = this.registerForm.get(\"Password\")?.value;\n    const confirmPassword = this.registerForm.get(\"ConfirmPassword\")?.value;\n    if (providedPassword !== confirmPassword) {\n      console.log(\"Passwords do not match\");\n      this.matchingError = true;\n      return;\n    }\n    console.log(\"Register form submitted\");\n    console.log(\"Register Data: \", JSON.stringify(this.registerForm.value));\n    const info = this.registerForm.value;\n    this.authService.register(info).subscribe(response => {\n      if (response.success) {\n        console.log(\"Registration success. User: \", JSON.stringify(info));\n        this.router.navigate(['login']);\n      } else {\n        console.log(\"Registration failed. Error: \", response.message);\n      }\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 36,\n  vars: 5,\n  consts: [[1, \"mb-3\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [1, \"form-floating\", \"mb-3\", \"col-md-4\", \"gx-1\"], [\"type\", \"text\", \"id\", \"FirstName\", \"formControlName\", \"FirstName\", 1, \"form-control\"], [\"for\", \"FirstName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"LastName\", \"formControlName\", \"LastName\", 1, \"form-control\"], [\"for\", \"LastName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"PhoneNumber\", \"formControlName\", \"PhoneNumber\", \"placeholder\", \"91827364\", 1, \"form-control\"], [\"for\", \"PhoneNumber\", 1, \"form-label\"], [1, \"form-group\"], [1, \"form-floating\", \"mb-3\"], [\"type\", \"email\", \"id\", \"Email\", \"formControlName\", \"Email\", \"placeholder\", \"name@example.com\", 1, \"form-control\"], [\"for\", \"Email\"], [\"class\", \"text text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"id\", \"Password\", \"formControlName\", \"Password\", \"placeholder\", \"********\", 1, \"form-control\"], [\"for\", \"Password\"], [\"type\", \"password\", \"id\", \"ConfirmPassword\", \"formControlName\", \"ConfirmPassword\", \"placeholder\", \"********\", 1, \"form-control\"], [\"for\", \"ConfirmPassword\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"routerLink\"], [1, \"text\", \"text-danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Register new account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2);\n      i0.ɵɵelement(5, \"input\", 3);\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"First Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 2);\n      i0.ɵɵelement(9, \"input\", 5);\n      i0.ɵɵelementStart(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Last Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 2);\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵelementStart(14, \"label\", 8);\n      i0.ɵɵtext(15, \"Phone number\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(16, \"div\", 9)(17, \"div\", 10);\n      i0.ɵɵelement(18, \"input\", 11);\n      i0.ɵɵelementStart(19, \"label\", 12);\n      i0.ɵɵtext(20, \"Email\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(21, RegisterComponent_span_21_Template, 2, 0, \"span\", 13);\n      i0.ɵɵelementStart(22, \"div\", 9)(23, \"div\", 10);\n      i0.ɵɵelement(24, \"input\", 14);\n      i0.ɵɵelementStart(25, \"label\", 15);\n      i0.ɵɵtext(26, \"Password\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(27, \"div\", 9)(28, \"div\", 10);\n      i0.ɵɵelement(29, \"input\", 16);\n      i0.ɵɵelementStart(30, \"label\", 17);\n      i0.ɵɵtext(31, \"Confirm Password\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(32, \"button\", 18);\n      i0.ɵɵtext(33, \"Create Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"button\", 19);\n      i0.ɵɵtext(35, \"Back to house listings\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngIf\", ctx.matchingError);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(4, _c0));\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICqB/DC,gCAAqD;IAAAA,wCAAwB;IAAAA,iBAAO;;;;;;ADbxF,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,WAAwB;IAAlF,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IAFzF,kBAAa,GAAY,KAAK;IAG5B,IAAI,CAACC,YAAY,GAAGH,WAAW,CAACI,KAAK,CAAC;MACpCC,SAAS,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACnCE,WAAW,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ,CAAC;MACtCG,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACU,QAAQ,CAAC;MACnCI,eAAe,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACU,QAAQ,CAAC;MAC1CK,KAAK,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACU,QAAQ;KAChC,CAAC;EACJ;EAEAM,QAAQ;IACN,MAAMC,gBAAgB,GAAG,IAAI,CAACV,YAAY,CAACW,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IACjE,MAAMC,eAAe,GAAG,IAAI,CAACb,YAAY,CAACW,GAAG,CAAC,iBAAiB,CAAC,EAAEC,KAAK;IAEvE,IAAGF,gBAAgB,KAAKG,eAAe,EAAE;MACvCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACC,aAAa,GAAG,IAAI;MACzB;;IAEFF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,IAAI,CAACC,SAAS,CAAC,IAAI,CAAClB,YAAY,CAACY,KAAK,CAAC,CAAC;IACvE,MAAMO,IAAI,GAAG,IAAI,CAACnB,YAAY,CAACY,KAAK;IACpC,IAAI,CAACb,WAAW,CAACqB,QAAQ,CAACD,IAAI,CAAC,CAC9BE,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAGA,QAAQ,CAACC,OAAO,EAAE;QACnBT,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;QACjE,IAAI,CAACrB,MAAM,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,MACI;QACHV,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEO,QAAQ,CAACG,OAAO,CAAC;;IAEjE,CAAC,CAAC;EACJ;;AArCW9B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV9BpC,0BAAI;MAAAA,oCAAoB;MAAAA,iBAAK;MAE7BA,+BAAsE;MAAxBA;QAAA,OAAYqC,cAAU;MAAA,EAAC;MACjErC,8BAA4B;MAEpBA,2BAAsF;MACtFA,gCAA0C;MAAAA,0BAAU;MAAAA,iBAAQ;MAEhEA,8BAA8C;MAC1CA,2BAAmF;MACnFA,iCAAyC;MAAAA,0BAAS;MAAAA,iBAAQ;MAE9DA,+BAA8C;MAC1CA,4BAAgH;MAChHA,iCAA4C;MAAAA,6BAAY;MAAAA,iBAAQ;MAGxEA,+BAAwB;MAEhBA,6BAA6G;MAC7GA,kCAAmB;MAAAA,sBAAK;MAAAA,iBAAQ;MAGxCA,uEAAoF;MACpFA,+BAAwB;MAEhBA,6BAA8G;MAC9GA,kCAAsB;MAAAA,yBAAQ;MAAAA,iBAAQ;MAG9CA,+BAAwB;MAEhBA,6BAA2H;MAC3HA,kCAA6B;MAAAA,iCAAgB;MAAAA,iBAAQ;MAG7DA,mCAAgF;MAAAA,+BAAc;MAAAA,iBAAS;MACvGA,mCAA0E;MAAAA,uCAAsB;MAAAA,iBAAS;;;MAnC1FA,eAA0B;MAA1BA,4CAA0B;MAqBlCA,gBAAmB;MAAnBA,wCAAmB;MAaoBA,gBAAiC;MAAjCA,mDAAiC;MAC/BA,eAAyB;MAAzBA,uDAAyB","names":["Validators","i0","RegisterComponent","constructor","formBuilder","router","authService","registerForm","group","FirstName","required","LastName","PhoneNumber","Password","ConfirmPassword","Email","onSubmit","providedPassword","get","value","confirmPassword","console","log","matchingError","JSON","stringify","info","register","subscribe","response","success","navigate","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/register/register.component.ts","/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from '../authentication/auth.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  matchingError: boolean = false;\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private authService: AuthService) {\n    this.registerForm = formBuilder.group({\n      FirstName: ['', Validators.required],\n      LastName: ['', Validators.required],\n      PhoneNumber: ['', Validators.required],\n      Password: ['', Validators.required],\n      ConfirmPassword: ['', Validators.required],\n      Email: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    const providedPassword = this.registerForm.get(\"Password\")?.value;\n    const confirmPassword = this.registerForm.get(\"ConfirmPassword\")?.value;\n\n    if(providedPassword !== confirmPassword) {\n      console.log(\"Passwords do not match\");\n      this.matchingError = true;\n      return;\n    }\n    console.log(\"Register form submitted\");\n    console.log(\"Register Data: \", JSON.stringify(this.registerForm.value));\n    const info = this.registerForm.value;\n    this.authService.register(info)\n    .subscribe((response) => {\n      if(response.success) {\n        console.log(\"Registration success. User: \", JSON.stringify(info));\n        this.router.navigate(['login'])\n      }\n      else {\n        console.log(\"Registration failed. Error: \", response.message);\n      }\n    })\n  }\n  /*\n\n  onSubmit() {\n    console.log(\"Register form submitted\");\n    console.log(this.registerForm.value);\n    const info = this.registerForm.value;\n    this.authService.register(info)\n      .subscribe(\n        (response) => {\n          if (!response.success) {\n            if (response.errors) {\n              // Handle validation errors\n              this.validationErrors = response.errors;\n            } else {\n              console.log(\"Registration failed. Error: \", response.message);\n            }\n          } else {\n            console.log(\"Registration success. User: \", info);\n          }\n        },\n        (error) => {\n          console.error(\"An unexpected error occurred: \", error);\n        }\n      );\n  }\n  */\n}\n\n","<h2>Register new account</h2>\n\n<form class=\"mb-3\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group row\">\n        <div class=\"form-floating mb-3 col-md-4 gx-1\">\n            <input type=\"text\" id=\"FirstName\" formControlName=\"FirstName\" class=\"form-control\"  />\n            <label for=\"FirstName\" class=\"form-label\">First Name</label>\n        </div>\n        <div class=\"form-floating mb-3 col-md-4 gx-1\">\n            <input type=\"text\" id=\"LastName\" formControlName=\"LastName\" class=\"form-control\" />\n            <label for=\"LastName\" class=\"form-label\">Last Name</label>\n        </div>\n        <div class=\"form-floating mb-3 col-md-4 gx-1\">\n            <input type=\"text\" id=\"PhoneNumber\" formControlName=\"PhoneNumber\" class=\"form-control\" placeholder=\"91827364\" />\n            <label for=\"PhoneNumber\" class=\"form-label\">Phone number</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"form-floating mb-3\">\n            <input type=\"email\" id=\"Email\" formControlName=\"Email\" class=\"form-control\" placeholder=\"name@example.com\" />\n            <label for=\"Email\">Email</label>\n        </div>\n    </div>\n    <span *ngIf=\"matchingError\" class=\"text text-danger\">Two passwords must match</span>\n    <div class=\"form-group\">\n        <div class=\"form-floating mb-3\">\n            <input type=\"password\" id=\"Password\" formControlName=\"Password\" class=\"form-control\" placeholder=\"********\" />\n            <label for=\"Password\">Password</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"form-floating mb-3\">\n            <input type=\"password\" id=\"ConfirmPassword\" formControlName=\"ConfirmPassword\" class=\"form-control\" placeholder=\"********\"/>\n            <label for=\"ConfirmPassword\">Confirm Password</label>\n        </div>\n    </div>\n    <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"registerForm.invalid\">Create Account</button>\n    <button class=\"btn btn-secondary\" type=\"button\" [routerLink]=\"['houses']\">Back to house listings</button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
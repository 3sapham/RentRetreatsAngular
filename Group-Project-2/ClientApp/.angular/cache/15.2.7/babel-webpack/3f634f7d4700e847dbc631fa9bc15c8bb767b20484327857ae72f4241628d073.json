{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  isLoggedIn() {\n    // Legg til logikken for å sjekke om brukeren er logget inn\n    return !!this.user;\n  }\n  getUserName() {\n    // Hent brukernavn fra user-objektet eller annen kilde\n    return this.user?.userName || '';\n  }\n  logout() {\n    // Implementer logikk for utlogging\n    this.user = null;\n  }\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = \"api/user\";\n  }\n  login(user) {\n    const url = `${this.baseUrl}/login`;\n    return this.http.post(url, user);\n  }\n  logout() {\n    const url = `${this.baseUrl}/logout`;\n    return this.http.post(url, \"\");\n  }\n  register(user) {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n  getMe() {\n    const url = `${this.baseUrl}`;\n    return this.http.get(url).pipe(catchError(error => {\n      if (error.status === 401) {\n        this.router.navigate([\"/login\"]);\n      }\n      return throwError(error);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAA+CA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAQnF,OAAM,MAAOC,WAAW;EAKtBC,UAAU;IACR;IACA,OAAO,CAAC,CAAC,IAAI,CAACC,IAAI;EACpB;EAEAC,WAAW;IACT;IACA,OAAO,IAAI,CAACD,IAAI,EAAEE,QAAQ,IAAI,EAAE;EAClC;EAEAC,MAAM;IACJ;IACA,IAAI,CAACH,IAAI,GAAG,IAAI;EAClB;EAEAI,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAnB5C,YAAO,GAAG,UAAU;EAmBoC;EAEzDC,KAAK,CAACP,IAAiB;IAC5B,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,QAAQ;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAACF,GAAG,EAAER,IAAI,CAAC;EAClC;EAEOG,MAAM;IACX,MAAMK,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,SAAS;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAACF,GAAG,EAAE,EAAE,CAAC;EAChC;EAEOG,QAAQ,CAACX,IAAmB;IACjCY,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;IACjC,MAAMQ,GAAG,GAAG,IAAI,IAAI,CAACC,OAAO,WAAW;IACvC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAACF,GAAG,EAAER,IAAI,CAAC;EAClC;EAEOgB,KAAK;IACV,MAAMR,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,EAAE;IAC7B,OAAO,IAAI,CAACJ,IAAI,CAACY,GAAG,CAAMT,GAAG,CAAC,CAC7BU,IAAI,CACHtB,UAAU,CAAEuB,KAAK,IAAI;MACnB,IAAGA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACvB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,OAAOxB,UAAU,CAACsB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;;AAjDWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["catchError","throwError","AuthService","isLoggedIn","user","getUserName","userName","logout","constructor","http","router","login","url","baseUrl","post","register","console","log","JSON","stringify","getMe","get","pipe","error","status","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/authentication/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ILoginModel } from '../login/logInModel';\nimport { BehaviorSubject, Observable, Subject, catchError, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs';\nimport { RegisterModel } from '../register/registerModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = \"api/user\";\n\n  private user: any; // Du kan endre denne til å være av riktig type\n\n  isLoggedIn(): boolean {\n    // Legg til logikken for å sjekke om brukeren er logget inn\n    return !!this.user;\n  }\n\n  getUserName(): string {\n    // Hent brukernavn fra user-objektet eller annen kilde\n    return this.user?.userName || '';\n  }\n\n  logout(): void {\n    // Implementer logikk for utlogging\n    this.user = null;\n  }\n  \n  constructor(private http: HttpClient, private router: Router) { }\n\n  public login(user: ILoginModel): Observable<any> {\n    const url = `${this.baseUrl}/login`;\n    return this.http.post(url, user);\n  }\n\n  public logout(): Observable<any> {\n    const url = `${this.baseUrl}/logout`;\n    return this.http.post(url, \"\");\n  }\n\n  public register(user: RegisterModel): Observable<any> {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n\n  public getMe(): Observable<any> {\n    const url = `${this.baseUrl}`;\n    return this.http.get<any>(url)\n    .pipe(\n      catchError((error) => {\n        if(error.status === 401) {\n          this.router.navigate([\"/login\"]);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
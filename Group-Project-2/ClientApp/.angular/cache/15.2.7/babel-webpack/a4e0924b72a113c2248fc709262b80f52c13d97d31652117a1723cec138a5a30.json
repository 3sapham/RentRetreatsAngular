{"ast":null,"code":"import { catchError, tap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = \"api/user\";\n    this.isLoggedIn = false;\n  }\n  login(user) {\n    const url = `${this.baseUrl}/login`;\n    return this.http.post(url, user).pipe(tap(() => {\n      this.isLoggedIn = true;\n    }), catchError(error => {\n      console.error('Login failed', error);\n      return of(false);\n    }));\n  }\n  logout() {\n    const url = `${this.baseUrl}/logout`;\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n    return this.http.post(url, \"\");\n  }\n  isAuthenticated() {\n    return this.isLoggedIn;\n  }\n  register(user) {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAA+CA,UAAU,EAAcC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;;AAO5F,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,YAAO,GAAG,UAAU;IACpB,eAAU,GAAG,KAAK;EAEsC;EAEzDC,KAAK,CAACC,IAAiB;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,QAAQ;IACnC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC,CAACI,IAAI,CACnCX,GAAG,CAAC,MAAK;MACP,IAAI,CAACY,UAAU,GAAG,IAAI;IACxB,CAAC,CAAC,EACFb,UAAU,CAAEc,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAOZ,EAAE,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;EACH;EAEOc,MAAM;IACX,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,SAAS;IACpC,IAAI,CAACG,UAAU,GAAG,KAAK;IACvB,IAAI,CAACP,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAACF,GAAG,EAAE,EAAE,CAAC;EAChC;EAEAS,eAAe;IACb,OAAO,IAAI,CAACL,UAAU;EACxB;EAEOM,QAAQ,CAACX,IAAmB;IACjCO,OAAO,CAACK,GAAG,CAACC,IAAI,CAACC,SAAS,CAACd,IAAI,CAAC,CAAC;IACjC,MAAMC,GAAG,GAAG,IAAI,IAAI,CAACC,OAAO,WAAW;IACvC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EAClC;;AAlCWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["catchError","tap","of","AuthService","constructor","http","router","login","user","url","baseUrl","post","pipe","isLoggedIn","error","console","logout","navigate","isAuthenticated","register","log","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/authentication/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ILoginModel } from '../login/logInModel';\nimport { BehaviorSubject, Observable, Subject, catchError, throwError, tap, of } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { RegisterModel } from '../register/registerModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = \"api/user\";\n  private isLoggedIn = false;\n  \n  constructor(private http: HttpClient, private router: Router) { }\n\n  public login(user: ILoginModel): Observable<any> {\n    const url = `${this.baseUrl}/login`;\n    return this.http.post(url, user).pipe(\n      tap(() => {\n        this.isLoggedIn = true;\n      }),\n      catchError((error) => {\n        console.error('Login failed', error);\n        return of(false); \n      })\n    );\n  }\n\n  public logout(): Observable<any> {\n    const url = `${this.baseUrl}/logout`;\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n    return this.http.post(url, \"\");\n  }\n\n  isAuthenticated(): boolean {\n    return this.isLoggedIn;\n  }\n\n  public register(user: RegisterModel): Observable<any> {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = \"api/user\";\n    this.isLoggedIn = false;\n  }\n  login(user) {\n    const url = `${this.baseUrl}/login`;\n    this.isLoggedIn = true;\n    return this.http.post(url, user);\n  }\n  logout() {\n    const url = `${this.baseUrl}/logout`;\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n    return this.http.post(url, \"\");\n  }\n  isAuthenticated() {\n    return this.isLoggedIn;\n  }\n  register(user) {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAWA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,YAAO,GAAG,UAAU;IACpB,eAAU,GAAG,KAAK;EAEsC;EAEzDC,KAAK,CAACC,IAAiB;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,QAAQ;IACnC,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACH,GAAG,EAAED,IAAI,CAAC;EAClC;EAEOK,MAAM;IACX,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,SAAS;IACpC,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACL,MAAM,CAACQ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,IAAI,CAACT,IAAI,CAACO,IAAI,CAACH,GAAG,EAAE,EAAE,CAAC;EAChC;EAEAM,eAAe;IACb,OAAO,IAAI,CAACJ,UAAU;EACxB;EAEOK,QAAQ,CAACR,IAAmB;IACjCS,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;IACjC,MAAMC,GAAG,GAAG,IAAI,IAAI,CAACC,OAAO,WAAW;IACvC,OAAO,IAAI,CAACL,IAAI,CAACO,IAAI,CAACH,GAAG,EAAED,IAAI,CAAC;EAClC;;AA3BWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["AuthService","constructor","http","router","login","user","url","baseUrl","isLoggedIn","post","logout","navigate","isAuthenticated","register","console","log","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/authentication/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ILoginModel } from '../login/logInModel';\nimport { BehaviorSubject, Observable, Subject, catchError, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs';\nimport { RegisterModel } from '../register/registerModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = \"api/user\";\n  private isLoggedIn = false;\n  \n  constructor(private http: HttpClient, private router: Router) { }\n\n  public login(user: ILoginModel): Observable<any> {\n    const url = `${this.baseUrl}/login`;\n    this.isLoggedIn = true;\n    return this.http.post(url, user);\n  }\n\n  public logout(): Observable<any> {\n    const url = `${this.baseUrl}/logout`;\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n    return this.http.post(url, \"\");\n  }\n\n  isAuthenticated(): boolean {\n    return this.isLoggedIn;\n  }\n\n  public register(user: RegisterModel): Observable<any> {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
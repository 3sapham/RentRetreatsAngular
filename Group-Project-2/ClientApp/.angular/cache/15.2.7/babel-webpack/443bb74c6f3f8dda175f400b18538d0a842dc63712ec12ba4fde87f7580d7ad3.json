{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./reservations.service\";\nimport * as i4 from \"../houses/houses.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../shared/convert-to-currency.pipe\";\nfunction ReservationformComponent_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const house_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", house_r4.HouseId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(house_r4.Title);\n  }\n}\nfunction ReservationformComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelement(1, \"img\", 20);\n    i0.ɵɵelementStart(2, \"div\", 21)(3, \"h5\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"dl\", 22)(6, \"dt\", 23);\n    i0.ɵɵtext(7, \"Price per night\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"dd\", 24);\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"convertToCurrency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"dt\", 23);\n    i0.ɵɵtext(12, \"Booking duration\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"dd\", 24);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"dt\", 25)(16, \"strong\");\n    i0.ɵɵtext(17, \"Total Price\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"dd\", 26)(19, \"strong\");\n    i0.ɵɵtext(20);\n    i0.ɵɵpipe(21, \"convertToCurrency\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/house-details/\", ctx_r2.chosenHouse.HouseId, \"\");\n    i0.ɵɵproperty(\"src\", ctx_r2.chosenHouse.HouseImageUrl, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r2.chosenHouse.Description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.chosenHouse.Title);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(10, 7, ctx_r2.chosenHouse.PricePerNight, \"kr\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.numberOfDays, \" days\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(21, 10, ctx_r2.totalPrice, \"kr\"));\n  }\n}\nfunction ReservationformComponent_button_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function ReservationformComponent_button_25_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.backToReservations());\n    });\n    i0.ɵɵtext(1, \"Back\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ReservationformComponent {\n  constructor(_formbuilder, _router, _route, _reservationService, _houseService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._reservationService = _reservationService;\n    this._houseService = _houseService;\n    this.isEditMode = false;\n    this.isCreateMode = false;\n    this.reservationId = -1;\n    this.houses = [];\n    this.numberOfDays = 0;\n    this.totalPrice = 0;\n    this.currentDate = '';\n    this.checkIn = '';\n    this.checkOut = this.checkIn;\n    this.houseSelectList = this.houses;\n    this.reservationForm = _formbuilder.group({\n      houseId: ['', Validators.required],\n      checkInDate: [this.formatDate(new Date()), Validators.required],\n      checkOutDate: [this.formatDate(new Date()), Validators.required]\n    });\n  }\n  getHouses() {\n    this._houseService.getHouses().subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.houseSelectList = data;\n    });\n  }\n  onSubmit() {\n    console.log(\"ReservationCreate form submitted:\");\n    console.log(this.reservationForm);\n    const newReservation = this.reservationForm.value;\n    if (this.isEditMode) {\n      this._reservationService.updateReservation(this.reservationId, newReservation).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/reservations']);\n        } else {\n          console.log('Reservation update failed');\n        }\n      });\n    } else {\n      this._reservationService.createReservation(newReservation).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/reservation-details/' + this.reservationId]);\n        } else {\n          console.log('Reservation creation failed');\n        }\n      });\n    }\n  }\n  backToReservations() {\n    this._route.params.subscribe(params => {\n      if (params['view'] === 'Table') {\n        this._router.navigate(['/reservations']);\n      } else if (params['view'] === 'Details') {\n        this._router.navigate(['/reservation-details/' + this.reservationId]);\n      }\n    });\n  }\n  calculateNumberOfDays() {\n    const checkInDateStr = this.reservationForm?.get('checkInDate')?.value;\n    const checkOutDateStr = this.reservationForm?.get('checkOutDate')?.value;\n    if (checkInDateStr && checkOutDateStr) {\n      const checkInDate = new Date(checkInDateStr);\n      const checkOutDate = new Date(checkOutDateStr);\n      if (!isNaN(checkInDate.getTime()) && !isNaN(checkOutDate.getTime())) {\n        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();\n        const numberOfDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        this.numberOfDays = numberOfDays;\n        this.totalPrice = this.chosenHouse?.PricePerNight * numberOfDays;\n      } else {\n        console.error('Invalid date strings');\n      }\n    } else {\n      console.error('Invalid date strings');\n    }\n  }\n  formatDate(date) {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n  loadReservationForEdit(reservationId) {\n    this._reservationService.getReservationById(reservationId).subscribe(reservation => {\n      console.log('retrieved reservation: ', reservation);\n      this.reservationForm.patchValue({\n        houseId: reservation.HouseId,\n        checkInDate: this.formatDate(new Date(reservation.CheckInDate)),\n        checkOutDate: this.formatDate(new Date(reservation.CheckOutDate))\n      });\n      this.changeHouse(reservation.HouseId);\n      this.totalPrice = reservation.TotalPrice;\n      this.checkIn = reservation.CheckInDate;\n      console.log('Total price: ' + this.totalPrice);\n    }, error => {\n      console.error('Error loading reservation for edit:', error);\n    });\n  }\n  changeHouse(houseIdString) {\n    const houseId = +houseIdString;\n    if (!isNaN(houseId)) {\n      this._houseService.getHouseById(houseId).subscribe(house => {\n        this.chosenHouse = house;\n      }, error => {\n        console.error('Error changing houses:', error);\n      });\n    } else {\n      console.error('houseSelect is not a number');\n    }\n  }\n  ngOnInit() {\n    this.getHouses();\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false;\n        this.isCreateMode = true;\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true;\n        this.isCreateMode = false;\n        this.reservationId = +params['id'];\n        this.loadReservationForEdit(this.reservationId);\n      }\n    });\n    this.currentDate = this.formatDate(new Date());\n    this.checkIn = this.currentDate;\n    this.reservationForm.get('checkInDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkIn = this.reservationForm?.get('checkInDate')?.value;\n      const checkInDate = this.reservationForm?.get('checkInDate')?.value;\n      const checkOutDate = this.reservationForm?.get('checkOutDate')?.value;\n      if (checkOutDate < checkInDate) {\n        this.reservationForm.get('checkOutDate')?.setValue(this.checkIn);\n      }\n    });\n    this.reservationForm.get('checkOutDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkOut = this.reservationForm.get('checkOutDate')?.value;\n    });\n  }\n}\nReservationformComponent.ɵfac = function ReservationformComponent_Factory(t) {\n  return new (t || ReservationformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ReservationService), i0.ɵɵdirectiveInject(i4.HouseService));\n};\nReservationformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReservationformComponent,\n  selectors: [[\"app-reservations-reservationform\"]],\n  decls: 26,\n  vars: 8,\n  consts: [[1, \"container\", \"p-5\", \"shadow-sm\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [1, \"form-floating\", \"col-md-4\", \"mb-3\", \"gx-1\"], [\"formControlName\", \"houseId\", 1, \"form-select\", 3, \"change\"], [\"houseSelect\", \"\"], [\"value\", \"\", \"disabled\", \"\", \"selected\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"houseId\", 1, \"form-label\"], [1, \"form-floating\", \"col-md-3\", \"mb-3\", \"gx-1\"], [\"type\", \"date\", \"id\", \"checkInDate\", \"formControlName\", \"checkInDate\", 1, \"form-control\", 3, \"min\"], [\"for\", \"checkInDate\", 1, \"form-label\"], [\"type\", \"date\", \"id\", \"checkOutDate\", \"formControlName\", \"checkOutDate\", 1, \"form-control\", 3, \"min\"], [\"for\", \"checkOutDate\", 1, \"form-label\"], [1, \"col-md-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"rounded-pill\", 2, \"height\", \"50px\", 3, \"disabled\"], [\"class\", \"reservation-info row align-items-center\", 4, \"ngIf\"], [\"class\", \"btn btn-secondary rounded-pill my-3\", 3, \"click\", 4, \"ngIf\"], [3, \"value\"], [1, \"reservation-info\", \"row\", \"align-items-center\"], [1, \"col-md-4\", 3, \"src\", \"alt\", \"routerLink\"], [1, \"col-md-8\", \"px-5\"], [1, \"row\"], [1, \"col-sm-9\"], [1, \"col-sm-3\"], [1, \"col-sm-9\", \"total\"], [1, \"col-sm-3\", \"total\"], [1, \"btn\", \"btn-secondary\", \"rounded-pill\", \"my-3\", 3, \"click\"]],\n  template: function ReservationformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r7 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function ReservationformComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"select\", 4, 5);\n      i0.ɵɵlistener(\"change\", function ReservationformComponent_Template_select_change_6_listener() {\n        i0.ɵɵrestoreView(_r7);\n        const _r0 = i0.ɵɵreference(7);\n        return i0.ɵɵresetView(ctx.changeHouse(_r0.value));\n      });\n      i0.ɵɵelementStart(8, \"option\", 6);\n      i0.ɵɵtext(9, \"Select a house...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, ReservationformComponent_option_10_Template, 2, 2, \"option\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"label\", 8);\n      i0.ɵɵtext(12, \"HouseId:\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 9);\n      i0.ɵɵelement(14, \"input\", 10);\n      i0.ɵɵelementStart(15, \"label\", 11);\n      i0.ɵɵtext(16, \"Check In Date:\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 9);\n      i0.ɵɵelement(18, \"input\", 12);\n      i0.ɵɵelementStart(19, \"label\", 13);\n      i0.ɵɵtext(20, \"Check Out Date:\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 14)(22, \"button\", 15);\n      i0.ɵɵtext(23);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(24, ReservationformComponent_div_24_Template, 22, 13, \"div\", 16);\n      i0.ɵɵtemplate(25, ReservationformComponent_button_25_Template, 2, 0, \"button\", 17);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Reservation\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.reservationForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.houseSelectList);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"min\", ctx.currentDate);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"disabled\", ctx.reservationForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Create\", \" Reservation \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.chosenHouse);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isEditMode || ctx.isCreateMode);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink, i6.ConvertToCurrency],\n  styles: [\".reservation-info[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n    border-radius: 2rem;\\n}\\n\\nh5[_ngcontent-%COMP%] {\\n  margin-bottom: 2rem;\\n}\\n\\nimg[_ngcontent-%COMP%]:hover {\\n    opacity: 0.9;\\n    cursor: pointer;\\n}\\n\\n\\ndl[_ngcontent-%COMP%]    > dt[_ngcontent-%COMP%], dd[_ngcontent-%COMP%] {\\n  font-weight: 300;\\n}\\n\\n.total[_ngcontent-%COMP%] {\\n  border-top: 1px solid #ccc; \\n  padding-top: 10px; \\n  margin-top: 10px; \\n  font-weight: bold;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVzZXJ2YXRpb25zL3Jlc2VydmF0aW9uZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7QUFDbkI7OztBQUdBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsMEJBQTBCO0VBQzFCLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLnJlc2VydmF0aW9uLWluZm8gaW1nIHtcbiAgICBib3JkZXItcmFkaXVzOiAycmVtO1xufVxuXG5oNSB7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG59XG5cbmltZzpob3ZlciB7XG4gICAgb3BhY2l0eTogMC45O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuXG5kbCA+IGR0LCBkZCB7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG59XG5cbi50b3RhbCB7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjY2NjOyBcbiAgcGFkZGluZy10b3A6IDEwcHg7IFxuICBtYXJnaW4tdG9wOiAxMHB4OyBcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;;;;;;ICQjFC,kCAAsE;IAAAA,YAAiB;IAAAA,iBAAS;;;;IAAlDA,wCAAuB;IAACA,eAAiB;IAAjBA,oCAAiB;;;;;IAmBvGA,+BAAyE;IACrEA,0BAAgJ;IAChJA,+BAA2B;IACnBA,YAAuB;IAAAA,iBAAK;IAChCA,8BAAgB;IACSA,+BAAe;IAAAA,iBAAK;IACzCA,8BAAqB;IAAAA,YAAyD;;IAAAA,iBAAK;IACnFA,+BAAqB;IAAAA,iCAAgB;IAAAA,iBAAK;IAC1CA,+BAAqB;IAAAA,aAAuB;IAAAA,iBAAK;IACjDA,+BAA2B;IAAQA,4BAAW;IAAAA,iBAAS;IACvDA,+BAA2B;IAAQA,aAA0C;;IAAAA,iBAAS;;;;IATNA,eAAqD;IAArDA,0FAAqD;IAAxIA,wEAAiC;IAE9BA,eAAuB;IAAvBA,8CAAuB;IAGFA,eAAyD;IAAzDA,mFAAyD;IAEzDA,eAAuB;IAAvBA,uDAAuB;IAETA,eAA0C;IAA1CA,qEAA0C;;;;;;IAIzFA,kCAAsH;IAA/BA;MAAAA;MAAA;MAAA,OAASA,0CAAoB;IAAA,EAAC;IAACA,oBAAI;IAAAA,iBAAS;;;AD9BvI,OAAM,MAAOC,wBAAwB;EAYnCC,YACUC,YAAyB,EACzBC,OAAe,EACfC,MAAsB,EACtBC,mBAAuC,EACvCC,aAA2B;IAJ3B,iBAAY,GAAZJ,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IACN,wBAAmB,GAAnBC,mBAAmB;IACnB,kBAAa,GAAbC,aAAa;IAfvB,eAAU,GAAY,KAAK;IAC3B,iBAAY,GAAY,KAAK;IAC7B,kBAAa,GAAW,CAAC,CAAC;IAC1B,WAAM,GAAa,EAAE;IACrB,iBAAY,GAAW,CAAC;IACxB,eAAU,GAAW,CAAC;IACtB,gBAAW,GAAW,EAAE;IACxB,YAAO,GAAW,EAAE;IACpB,aAAQ,GAAW,IAAI,CAACC,OAAO;IAyB/B,oBAAe,GAAa,IAAI,CAACC,MAAM;IAhBrC,IAAI,CAACC,eAAe,GAAGP,YAAY,CAACQ,KAAK,CAAC;MACxCC,OAAO,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACc,QAAQ,CAAC;MAClCC,WAAW,EAAE,CAAC,IAAI,CAACC,UAAU,CAAC,IAAIC,IAAI,EAAE,CAAC,EAAEjB,UAAU,CAACc,QAAQ,CAAC;MAC/DI,YAAY,EAAE,CAAC,IAAI,CAACF,UAAU,CAAC,IAAIC,IAAI,EAAE,CAAC,EAAEjB,UAAU,CAACc,QAAQ;KAChE,CAAC;EACJ;EAEAK,SAAS;IACP,IAAI,CAACX,aAAa,CAACW,SAAS,EAAE,CAC3BC,SAAS,CAACC,IAAI,IAAG;MAChBC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;MACxC,IAAI,CAACK,eAAe,GAAGL,IAAI;IAC7B,CAAC,CACA;EACL;EAIAM,QAAQ;IACNL,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,eAAe,CAAC;IACjC,MAAMiB,cAAc,GAAG,IAAI,CAACjB,eAAe,CAACkB,KAAK;IACjD,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,IAAI,CAACvB,mBAAmB,CAACwB,iBAAiB,CAAC,IAAI,CAACC,aAAa,EAAEJ,cAAc,CAAC,CAC3ER,SAAS,CAACa,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBZ,OAAO,CAACC,GAAG,CAACU,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAAC9B,OAAO,CAAC+B,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;SACzC,MAAM;UACLd,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;MAE5C,CAAC,CAAC;KACL,MAAM;MACL,IAAI,CAAChB,mBAAmB,CAAC8B,iBAAiB,CAACT,cAAc,CAAC,CACvDR,SAAS,CAACa,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBZ,OAAO,CAACC,GAAG,CAACU,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAAC9B,OAAO,CAAC+B,QAAQ,CAAC,CAAC,uBAAuB,GAAG,IAAI,CAACJ,aAAa,CAAC,CAAC;SACtE,MACI;UACHV,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;MAE9C,CAAC,CAAC;;EAER;EAEAe,kBAAkB;IAChB,IAAI,CAAChC,MAAM,CAACiC,MAAM,CAACnB,SAAS,CAACmB,MAAM,IAAG;MACpC,IAAIA,MAAM,CAAC,MAAM,CAAC,KAAK,OAAO,EAAE;QAC9B,IAAI,CAAClC,OAAO,CAAC+B,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;OACzC,MAAM,IAAIG,MAAM,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;QACvC,IAAI,CAAClC,OAAO,CAAC+B,QAAQ,CAAC,CAAC,uBAAuB,GAAG,IAAI,CAACJ,aAAa,CAAC,CAAC;;IAEzE,CAAC,CAAC;EACJ;EAEAQ,qBAAqB;IACnB,MAAMC,cAAc,GAAG,IAAI,CAAC9B,eAAe,EAAE+B,GAAG,CAAC,aAAa,CAAC,EAAEb,KAAK;IACtE,MAAMc,eAAe,GAAG,IAAI,CAAChC,eAAe,EAAE+B,GAAG,CAAC,cAAc,CAAC,EAAEb,KAAK;IAExE,IAAIY,cAAc,IAAIE,eAAe,EAAE;MACrC,MAAM5B,WAAW,GAAG,IAAIE,IAAI,CAACwB,cAAc,CAAC;MAC5C,MAAMvB,YAAY,GAAG,IAAID,IAAI,CAAC0B,eAAe,CAAC;MAE9C,IAAI,CAACC,KAAK,CAAC7B,WAAW,CAAC8B,OAAO,EAAE,CAAC,IAAI,CAACD,KAAK,CAAC1B,YAAY,CAAC2B,OAAO,EAAE,CAAC,EAAE;QACnE,MAAMC,QAAQ,GAAG5B,YAAY,CAAC2B,OAAO,EAAE,GAAG9B,WAAW,CAAC8B,OAAO,EAAE;QAC/D,MAAME,YAAY,GAAGC,IAAI,CAACC,IAAI,CAACH,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QAC7D,IAAI,CAACC,YAAY,GAAGA,YAAY;QAChC,IAAI,CAACG,UAAU,GAAG,IAAI,CAACC,WAAW,EAAEC,aAAa,GAAGL,YAAY;OACjE,MAAM;QACLzB,OAAO,CAAC+B,KAAK,CAAC,sBAAsB,CAAC;;KAExC,MAAM;MACL/B,OAAO,CAAC+B,KAAK,CAAC,sBAAsB,CAAC;;EAEzC;EAEQrC,UAAU,CAACsC,IAAU;IAC3B,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,EAAE;IAC/B,MAAMC,KAAK,GAAG,CAAC,GAAG,IAAIH,IAAI,CAACI,QAAQ,EAAE,GAAG,CAAC,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,GAAG,GAAG,CAAC,GAAG,GAAGN,IAAI,CAACO,OAAO,EAAE,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,OAAO,GAAGJ,IAAI,IAAIE,KAAK,IAAIG,GAAG,EAAE;EAClC;EAEAE,sBAAsB,CAAC9B,aAAqB;IAC1C,IAAI,CAACzB,mBAAmB,CAACwD,kBAAkB,CAAC/B,aAAa,CAAC,CACvDZ,SAAS,CACP4C,WAAgB,IAAI;MACnB1C,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEyC,WAAW,CAAC;MACnD,IAAI,CAACrD,eAAe,CAACsD,UAAU,CAAC;QAC9BpD,OAAO,EAAEmD,WAAW,CAACE,OAAO;QAC5BnD,WAAW,EAAE,IAAI,CAACC,UAAU,CAAC,IAAIC,IAAI,CAAC+C,WAAW,CAACG,WAAW,CAAC,CAAC;QAC/DjD,YAAY,EAAE,IAAI,CAACF,UAAU,CAAC,IAAIC,IAAI,CAAC+C,WAAW,CAACI,YAAY,CAAC;OACjE,CAAC;MACF,IAAI,CAACC,WAAW,CAACL,WAAW,CAACE,OAAO,CAAC;MACrC,IAAI,CAAChB,UAAU,GAAGc,WAAW,CAACM,UAAU;MACxC,IAAI,CAAC7D,OAAO,GAAGuD,WAAW,CAACG,WAAW;MACtC7C,OAAO,CAACC,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC2B,UAAU,CAAC;IAChD,CAAC,EAAGG,KAAU,IAAI;MAChB/B,OAAO,CAAC+B,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D,CAAC,CACF;EACL;EAGAgB,WAAW,CAACE,aAAqB;IAC/B,MAAM1D,OAAO,GAAW,CAAC0D,aAAa;IACtC,IAAI,CAAC3B,KAAK,CAAC/B,OAAO,CAAC,EAAE;MACnB,IAAI,CAACL,aAAa,CAACgE,YAAY,CAAC3D,OAAO,CAAC,CACrCO,SAAS,CACPqD,KAAU,IAAI;QACb,IAAI,CAACtB,WAAW,GAAGsB,KAAK;MAC1B,CAAC,EAAGpB,KAAU,IAAI;QAChB/B,OAAO,CAAC+B,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CACF;KACJ,MAAM;MACL/B,OAAO,CAAC+B,KAAK,CAAC,6BAA6B,CAAC;;EAEhD;EAEAqB,QAAQ;IACN,IAAI,CAACvD,SAAS,EAAE;IAChB,IAAI,CAACb,MAAM,CAACiC,MAAM,CAACnB,SAAS,CAACmB,MAAM,IAAG;MACpC,IAAIA,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;QAC/B,IAAI,CAACT,UAAU,GAAG,KAAK;QACvB,IAAI,CAAC6C,YAAY,GAAG,IAAI;OACzB,MAAM,IAAIpC,MAAM,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;QACpC,IAAI,CAACT,UAAU,GAAG,IAAI;QACtB,IAAI,CAAC6C,YAAY,GAAG,KAAK;QACzB,IAAI,CAAC3C,aAAa,GAAG,CAACO,MAAM,CAAC,IAAI,CAAC;QAClC,IAAI,CAACuB,sBAAsB,CAAC,IAAI,CAAC9B,aAAa,CAAC;;IAEnD,CAAC,CAAC;IACF,IAAI,CAAC4C,WAAW,GAAG,IAAI,CAAC5D,UAAU,CAAC,IAAIC,IAAI,EAAE,CAAC;IAC9C,IAAI,CAACR,OAAO,GAAG,IAAI,CAACmE,WAAW;IAC/B,IAAI,CAACjE,eAAe,CAAC+B,GAAG,CAAC,aAAa,CAAC,EAAEmC,YAAY,CAACzD,SAAS,CAAC,MAAK;MACnE,IAAI,CAACoB,qBAAqB,EAAE;MAC5B,IAAI,CAAC/B,OAAO,GAAG,IAAI,CAACE,eAAe,EAAE+B,GAAG,CAAC,aAAa,CAAC,EAAEb,KAAK;MAC9D,MAAMd,WAAW,GAAG,IAAI,CAACJ,eAAe,EAAE+B,GAAG,CAAC,aAAa,CAAC,EAAEb,KAAa;MAC3E,MAAMX,YAAY,GAAG,IAAI,CAACP,eAAe,EAAE+B,GAAG,CAAC,cAAc,CAAC,EAAEb,KAAa;MAC7E,IAAIX,YAAY,GAAGH,WAAW,EAAE;QAC9B,IAAI,CAACJ,eAAe,CAAC+B,GAAG,CAAC,cAAc,CAAC,EAAEoC,QAAQ,CAAC,IAAI,CAACrE,OAAO,CAAC;;IAEpE,CAAC,CAAC;IAEF,IAAI,CAACE,eAAe,CAAC+B,GAAG,CAAC,cAAc,CAAC,EAAEmC,YAAY,CAACzD,SAAS,CAAC,MAAK;MACpE,IAAI,CAACoB,qBAAqB,EAAE;MAC5B,IAAI,CAACuC,QAAQ,GAAG,IAAI,CAACpE,eAAe,CAAC+B,GAAG,CAAC,cAAc,CAAC,EAAEb,KAAK;IACjE,CAAC,CAAC;EACJ;;AAzKW3B,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAA8E;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCZrCnF,8BAAqC;MAE7BA,YAAiD;MAAAA,iBAAK;MAE1DA,+BAA4D;MAAtDA;QAAA,OAAYoF,cAAU;MAAA,EAAC;MACzBpF,8BAA4B;MAE+CA;QAAAA;QAAA;QAAA,OAAUA,yCAA8B;MAAA,EAAC;MACxGA,iCAAmC;MAAAA,iCAAiB;MAAAA,iBAAS;MAC7DA,iFAAgG;MACpGA,iBAAS;MACTA,iCAAwC;MAAAA,yBAAQ;MAAAA,iBAAQ;MAE5DA,+BAA8C;MAC1CA,6BAA4G;MAC5GA,kCAA4C;MAAAA,+BAAc;MAAAA,iBAAQ;MAEtEA,+BAA8C;MAC1CA,6BAAmG;MACnGA,kCAA6C;MAAAA,gCAAe;MAAAA,iBAAQ;MAExEA,gCAAsB;MAEdA,aACJ;MAAAA,iBAAS;MAIrBA,8EAaM;MACNA,kFAAmI;MACvIA,iBAAM;;;MAzCEA,eAAiD;MAAjDA,+EAAiD;MAEvBA,eAA6B;MAA7BA,+CAA6B;MAKjBA,eAAkB;MAAlBA,6CAAkB;MAKuCA,eAAmB;MAAnBA,qCAAmB;MAQzBA,eAAoC;MAApCA,sDAAoC;MACjHA,eACJ;MADIA,iFACJ;MAINA,eAAiB;MAAjBA,sCAAiB;MAcdA,eAAgC;MAAhCA,yDAAgC","names":["Validators","i0","ReservationformComponent","constructor","_formbuilder","_router","_route","_reservationService","_houseService","checkIn","houses","reservationForm","group","houseId","required","checkInDate","formatDate","Date","checkOutDate","getHouses","subscribe","data","console","log","JSON","stringify","houseSelectList","onSubmit","newReservation","value","isEditMode","updateReservation","reservationId","response","success","message","navigate","createReservation","backToReservations","params","calculateNumberOfDays","checkInDateStr","get","checkOutDateStr","isNaN","getTime","timeDiff","numberOfDays","Math","ceil","totalPrice","chosenHouse","PricePerNight","error","date","year","getFullYear","month","getMonth","slice","day","getDate","loadReservationForEdit","getReservationById","reservation","patchValue","HouseId","CheckInDate","CheckOutDate","changeHouse","TotalPrice","houseIdString","getHouseById","house","ngOnInit","isCreateMode","currentDate","valueChanges","setValue","checkOut","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/reservations/reservationform.component.ts","/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/reservations/reservationform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ReservationService } from './reservations.service';\nimport { HouseService } from '../houses/houses.service';\nimport { IHouse } from '../houses/house';\n\n@Component({\n  selector: \"app-reservations-reservationform\",\n  templateUrl: \"./reservationform.component.html\",\n  styleUrls: ['./reservationform.component.css']\n})\nexport class ReservationformComponent {\n  reservationForm: FormGroup;\n  isEditMode: boolean = false;\n  isCreateMode: boolean = false;\n  reservationId: number = -1;\n  houses: IHouse[] = [];\n  numberOfDays: number = 0;\n  totalPrice: number = 0;\n  currentDate: string = '';\n  checkIn: string = '';\n  checkOut: string = this.checkIn;\n\n  constructor(\n    private _formbuilder: FormBuilder,\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _reservationService: ReservationService,\n    private _houseService: HouseService\n  ) {\n    this.reservationForm = _formbuilder.group({\n      houseId: ['', Validators.required],\n      checkInDate: [this.formatDate(new Date()), Validators.required],\n      checkOutDate: [this.formatDate(new Date()), Validators.required],\n    });\n  }\n\n  getHouses(): void {\n    this._houseService.getHouses()\n      .subscribe(data => {\n        console.log('All', JSON.stringify(data));\n        this.houseSelectList = data;\n      }\n      );\n  }\n\n  houseSelectList: IHouse[] = this.houses;\n\n  onSubmit() {\n    console.log(\"ReservationCreate form submitted:\");\n    console.log(this.reservationForm);\n    const newReservation = this.reservationForm.value;\n    if (this.isEditMode) {\n      this._reservationService.updateReservation(this.reservationId, newReservation)\n        .subscribe(response => {\n          if (response.success) {\n            console.log(response.message);\n            this._router.navigate(['/reservations']);\n          } else {\n            console.log('Reservation update failed');\n          }\n        });\n    } else {\n      this._reservationService.createReservation(newReservation)\n        .subscribe(response => {\n          if (response.success) {\n            console.log(response.message);\n            this._router.navigate(['/reservation-details/' + this.reservationId]);\n          }\n          else {\n            console.log('Reservation creation failed');\n          }\n        });\n    }\n  }\n\n  backToReservations() {\n    this._route.params.subscribe(params => {\n      if (params['view'] === 'Table') {\n        this._router.navigate(['/reservations']);\n      } else if (params['view'] === 'Details') {\n        this._router.navigate(['/reservation-details/' + this.reservationId]);\n      }\n    });\n  }\n\n  calculateNumberOfDays() {\n    const checkInDateStr = this.reservationForm?.get('checkInDate')?.value;\n    const checkOutDateStr = this.reservationForm?.get('checkOutDate')?.value;\n\n    if (checkInDateStr && checkOutDateStr) {\n      const checkInDate = new Date(checkInDateStr);\n      const checkOutDate = new Date(checkOutDateStr);\n\n      if (!isNaN(checkInDate.getTime()) && !isNaN(checkOutDate.getTime())) {\n        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();\n        const numberOfDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        this.numberOfDays = numberOfDays;\n        this.totalPrice = this.chosenHouse?.PricePerNight * numberOfDays;\n      } else {\n        console.error('Invalid date strings');\n      }\n    } else {\n      console.error('Invalid date strings');\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n\n  loadReservationForEdit(reservationId: number) {\n    this._reservationService.getReservationById(reservationId)\n      .subscribe(\n        (reservation: any) => {\n          console.log('retrieved reservation: ', reservation);\n          this.reservationForm.patchValue({\n            houseId: reservation.HouseId,\n            checkInDate: this.formatDate(new Date(reservation.CheckInDate)),\n            checkOutDate: this.formatDate(new Date(reservation.CheckOutDate)),\n          });\n          this.changeHouse(reservation.HouseId);\n          this.totalPrice = reservation.TotalPrice;\n          this.checkIn = reservation.CheckInDate;\n          console.log('Total price: ' + this.totalPrice);\n        }, (error: any) => {\n          console.error('Error loading reservation for edit:', error);\n        }\n      );\n  }\n\n  chosenHouse!: IHouse;\n  changeHouse(houseIdString: string) {\n    const houseId: number = +houseIdString;\n    if (!isNaN(houseId)) {\n      this._houseService.getHouseById(houseId)\n        .subscribe(\n          (house: any) => {\n            this.chosenHouse = house;\n          }, (error: any) => {\n            console.error('Error changing houses:', error);\n          }\n        );\n    } else {\n      console.error('houseSelect is not a number');\n    }\n  }\n\n  ngOnInit(): void {\n    this.getHouses();\n    this._route.params.subscribe(params => {\n      if (params['mode'] === 'create') {\n        this.isEditMode = false; \n        this.isCreateMode = true;\n      } else if (params['mode'] === 'edit') {\n        this.isEditMode = true; \n        this.isCreateMode = false;\n        this.reservationId = +params['id']; \n        this.loadReservationForEdit(this.reservationId);\n      }\n    });\n    this.currentDate = this.formatDate(new Date());\n    this.checkIn = this.currentDate;\n    this.reservationForm.get('checkInDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkIn = this.reservationForm?.get('checkInDate')?.value;\n      const checkInDate = this.reservationForm?.get('checkInDate')?.value as Date;\n      const checkOutDate = this.reservationForm?.get('checkOutDate')?.value as Date;\n      if (checkOutDate < checkInDate) {\n        this.reservationForm.get('checkOutDate')?.setValue(this.checkIn);\n      }\n    });\n\n    this.reservationForm.get('checkOutDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkOut = this.reservationForm.get('checkOutDate')?.value;\n    });\n  }\n}\n","<div class=\"container p-5 shadow-sm\">\n\n    <h2>{{ isEditMode ? 'Update' : 'Create'}} Reservation</h2>\n\n    <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"reservationForm\">\n        <div class=\"form-group row\">\n            <div class=\"form-floating col-md-4 mb-3 gx-1\">\n                <select #houseSelect formControlName=\"houseId\" class=\"form-select\" (change)=\"changeHouse(houseSelect.value)\">\n                    <option value=\"\" disabled selected>Select a house...</option>\n                    <option *ngFor=\"let house of houseSelectList\" [value]=\"house.HouseId\">{{ house.Title }}</option>\n                </select>\n                <label for=\"houseId\" class=\"form-label\">HouseId:</label>\n            </div>\n            <div class=\"form-floating col-md-3 mb-3 gx-1\">\n                <input type=\"date\" id=\"checkInDate\" formControlName=\"checkInDate\" class=\"form-control\" [min]=\"currentDate\"/>\n                <label for=\"checkInDate\" class=\"form-label\">Check In Date:</label>\n            </div>\n            <div class=\"form-floating col-md-3 mb-3 gx-1\">\n                <input type=\"date\" id=\"checkOutDate\" formControlName=\"checkOutDate\" class=\"form-control\" [min]=\"\"/>\n                <label for=\"checkOutDate\" class=\"form-label\">Check Out Date:</label>\n            </div>\n            <div class=\"col-md-2\">\n                <button class='btn btn-primary rounded-pill' style=\"height: 50px;\" type=\"submit\" [disabled]=\"reservationForm.invalid\">\n                    {{ isEditMode ? 'Update' : 'Create'}} Reservation\n                </button>\n            </div>\n        </div>\n    </form>\n    <div *ngIf=\"chosenHouse\" class=\"reservation-info row align-items-center\">\n        <img [src]=\"chosenHouse.HouseImageUrl\" [alt]=\"chosenHouse.Description\" class=\"col-md-4\" routerLink=\"/house-details/{{ chosenHouse.HouseId }}\" />\n        <div class=\"col-md-8 px-5\">\n            <h5>{{ chosenHouse.Title }}</h5>\n            <dl class=\"row\">\n                <dt class=\"col-sm-9\">Price per night</dt>\n                <dd class=\"col-sm-3\">{{ chosenHouse.PricePerNight | convertToCurrency: 'kr' }}</dd>\n                <dt class=\"col-sm-9\">Booking duration</dt>\n                <dd class=\"col-sm-3\">{{ numberOfDays }} days</dd>\n                <dt class=\"col-sm-9 total\"><strong>Total Price</strong></dt>\n                <dd class=\"col-sm-3 total\"><strong>{{ totalPrice | convertToCurrency: 'kr' }}</strong></dd>\n            </dl>\n        </div>\n    </div>\n    <button *ngIf=\"isEditMode || isCreateMode\" class='btn btn-secondary rounded-pill my-3' (click)=\"backToReservations()\">Back</button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
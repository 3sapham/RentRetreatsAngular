{"ast":null,"code":"import { catchError } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = \"api/user\";\n    this.isLoggedIn = false;\n  }\n  login(user) {\n    const url = `${this.baseUrl}/login`;\n    // Make sure to return the observable and handle success/failure\n    return this.http.post(url, user).pipe(tap(() => {\n      this.isLoggedIn = true;\n    }), catchError(error => {\n      // Handle login failure, you might want to show an error message\n      console.error('Login failed', error);\n      return of(false); // Return an observable with a \"false\" value\n    }));\n  }\n\n  logout() {\n    const url = `${this.baseUrl}/logout`;\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n    return this.http.post(url, \"\");\n  }\n  isAuthenticated() {\n    return this.isLoggedIn;\n  }\n  register(user) {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAA+CA,UAAU,QAAoB,MAAM;AAGnF,SAAqBC,GAAG,QAAQ,gBAAgB;;;;AAMhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,YAAO,GAAG,UAAU;IACpB,eAAU,GAAG,KAAK;EAEsC;EAEzDC,KAAK,CAACC,IAAiB;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,QAAQ;IACnC;IACA,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC,CAACI,IAAI,CACnCV,GAAG,CAAC,MAAK;MACP,IAAI,CAACW,UAAU,GAAG,IAAI;IACxB,CAAC,CAAC,EACFZ,UAAU,CAAEa,KAAK,IAAI;MACnB;MACAC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAOE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CACH;EACH;;EAEOC,MAAM;IACX,MAAMR,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,SAAS;IACpC,IAAI,CAACG,UAAU,GAAG,KAAK;IACvB,IAAI,CAACP,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,IAAI,CAACb,IAAI,CAACM,IAAI,CAACF,GAAG,EAAE,EAAE,CAAC;EAChC;EAEAU,eAAe;IACb,OAAO,IAAI,CAACN,UAAU;EACxB;EAEOO,QAAQ,CAACZ,IAAmB;IACjCO,OAAO,CAACM,GAAG,CAACC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;IACjC,MAAMC,GAAG,GAAG,IAAI,IAAI,CAACC,OAAO,WAAW;IACvC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EAClC;;AApCWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["catchError","tap","AuthService","constructor","http","router","login","user","url","baseUrl","post","pipe","isLoggedIn","error","console","of","logout","navigate","isAuthenticated","register","log","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/authentication/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ILoginModel } from '../login/logInModel';\nimport { BehaviorSubject, Observable, Subject, catchError, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { RegisterModel } from '../register/registerModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = \"api/user\";\n  private isLoggedIn = false;\n  \n  constructor(private http: HttpClient, private router: Router) { }\n\n  public login(user: ILoginModel): Observable<any> {\n    const url = `${this.baseUrl}/login`;\n    // Make sure to return the observable and handle success/failure\n    return this.http.post(url, user).pipe(\n      tap(() => {\n        this.isLoggedIn = true;\n      }),\n      catchError((error) => {\n        // Handle login failure, you might want to show an error message\n        console.error('Login failed', error);\n        return of(false); // Return an observable with a \"false\" value\n      })\n    );\n  }\n\n  public logout(): Observable<any> {\n    const url = `${this.baseUrl}/logout`;\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n    return this.http.post(url, \"\");\n  }\n\n  isAuthenticated(): boolean {\n    return this.isLoggedIn;\n  }\n\n  public register(user: RegisterModel): Observable<any> {\n    console.log(JSON.stringify(user));\n    const url = `/${this.baseUrl}/register`;\n    return this.http.post(url, user);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
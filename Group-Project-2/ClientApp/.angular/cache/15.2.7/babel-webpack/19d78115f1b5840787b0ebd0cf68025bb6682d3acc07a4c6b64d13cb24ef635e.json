{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet HouseDetailsComponent = class HouseDetailsComponent {\n  constructor(_formbuilder, _router, _reservationService, _houseService, activatedRoute, authService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._reservationService = _reservationService;\n    this._houseService = _houseService;\n    this.activatedRoute = activatedRoute;\n    this.authService = authService;\n    this.viewTitle = 'Details';\n    this.numberOfDays = 0;\n    this.totalPrice = 0;\n    this.currentDate = '';\n    this.checkIn = '';\n    this.checkOut = this.checkIn;\n    activatedRoute.params.subscribe(params => {\n      if (params.id) this.loadHouse(+params['id']);\n    });\n    this.reservationForm = _formbuilder.group({\n      checkInDate: [this.formatDate(new Date()), Validators.required],\n      checkOutDate: [this.formatDate(new Date()), Validators.required]\n    });\n  }\n  deleteHouse(house) {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${house.Title}\"?`);\n    if (confirmDelete) {\n      this._houseService.deleteHouse(house.HouseId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/houses']);\n        }\n      }, error => {\n        console.error('Error deleting house:', error);\n      });\n    }\n  }\n  loadHouse(houseId) {\n    this._houseService.getHouseById(houseId).subscribe(house => {\n      console.log('retrieved house: ', house);\n      this.house = house;\n    }, error => {\n      console.error('Error loading house for details view:', error);\n    });\n  }\n  isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n  onSubmit() {\n    console.log(\"ReservationCreate form submitted:\");\n    console.log(this.reservationForm);\n    if (this.authService.isAuthenticated()) {\n      const houseId = this.house.HouseId;\n      const newReservation = {\n        houseId,\n        ...this.reservationForm.value\n      };\n      this._reservationService.createReservation(newReservation).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate(['/reservations']);\n        } else {\n          console.log('Reservation creation failed');\n        }\n      });\n    } else {\n      // Redirect to login page if the user is not authenticated\n      this._router.navigate(['/login']);\n    }\n  }\n  backToHouses() {\n    this._router.navigate(['/houses']);\n  }\n  calculateNumberOfDays() {\n    const checkInDateStr = this.reservationForm?.get('checkInDate')?.value;\n    const checkOutDateStr = this.reservationForm?.get('checkOutDate')?.value;\n    if (checkInDateStr && checkOutDateStr) {\n      const checkInDate = new Date(checkInDateStr);\n      const checkOutDate = new Date(checkOutDateStr);\n      if (!isNaN(checkInDate.getTime()) && !isNaN(checkOutDate.getTime())) {\n        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();\n        const numberOfDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        this.numberOfDays = numberOfDays;\n        this.totalPrice = this.house?.PricePerNight * numberOfDays;\n      } else {\n        console.error('Invalid date strings');\n      }\n    } else {\n      console.error('Invalid date strings');\n    }\n  }\n  formatDate(date) {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n  ngOnInit() {\n    this.currentDate = this.formatDate(new Date());\n    this.checkIn = this.currentDate;\n    this.reservationForm.get('checkInDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkIn = this.reservationForm?.get('checkInDate')?.value;\n      const checkInDate = this.reservationForm?.get('checkInDate')?.value;\n      const checkOutDate = this.reservationForm?.get('checkOutDate')?.value;\n      if (checkOutDate < checkInDate) {\n        this.reservationForm.get('checkOutDate')?.setValue(this.checkIn);\n      }\n    });\n    this.reservationForm.get('checkOutDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkOut = this.reservationForm.get('checkOutDate')?.value;\n    });\n  }\n};\nHouseDetailsComponent = __decorate([Component({\n  selector: 'app-house-details-component',\n  templateUrl: './house-details.component.html',\n  styleUrls: ['./house-details.component.css']\n})], HouseDetailsComponent);\nexport { HouseDetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","HouseDetailsComponent","constructor","_formbuilder","_router","_reservationService","_houseService","activatedRoute","authService","checkIn","params","subscribe","id","loadHouse","reservationForm","group","checkInDate","formatDate","Date","required","checkOutDate","deleteHouse","house","confirmDelete","confirm","Title","HouseId","response","success","console","log","message","navigate","error","houseId","getHouseById","isAuthenticated","onSubmit","newReservation","value","createReservation","backToHouses","calculateNumberOfDays","checkInDateStr","get","checkOutDateStr","isNaN","getTime","timeDiff","numberOfDays","Math","ceil","totalPrice","PricePerNight","date","year","getFullYear","month","getMonth","slice","day","getDate","ngOnInit","currentDate","valueChanges","setValue","checkOut","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/teresapham/Projects/Group-Project-2/Group-Project-2/ClientApp/src/app/house-details/house-details.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { IHouse } from '../houses/house';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HouseService } from '../houses/houses.service';\nimport { ReservationService } from '../reservations/reservations.service';\nimport { AuthService } from '../authentication/auth.service';\n\n@Component({\n  selector: 'app-house-details-component',\n  templateUrl: './house-details.component.html',\n  styleUrls: ['./house-details.component.css']\n})\n\nexport class HouseDetailsComponent implements OnInit {\n  reservationForm: FormGroup;\n  viewTitle: string = 'Details';\n  house!: IHouse;\n  numberOfDays: number = 0;\n  totalPrice: number = 0;\n  currentDate: string = '';\n  checkIn: string = '';\n  checkOut: string = this.checkIn;\n\n  constructor(\n    private _formbuilder: FormBuilder,\n    private _router: Router,\n    private _reservationService: ReservationService,\n    private _houseService: HouseService,\n    private activatedRoute: ActivatedRoute,\n    public authService: AuthService)\n  {\n    activatedRoute.params.subscribe((params) => {\n      if (params.id)\n        this.loadHouse(+params['id'])\n    })\n    this.reservationForm = _formbuilder.group({\n      checkInDate: [this.formatDate(new Date()), Validators.required],\n      checkOutDate: [this.formatDate(new Date()), Validators.required],\n    });\n  }\n\n  deleteHouse(house: IHouse): void {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${house.Title}\"?`);\n    if (confirmDelete) {\n      this._houseService.deleteHouse(house.HouseId)\n        .subscribe(\n          (response) => {\n            if (response.success) {\n              console.log(response.message);\n              this._router.navigate(['/houses']);\n            }\n          },\n          (error) => {\n            console.error('Error deleting house:', error);\n          });\n    }\n  }\n\n  loadHouse(houseId: number) {\n    this._houseService.getHouseById(houseId)\n      .subscribe(\n        (house: any) => {\n          console.log('retrieved house: ', house);\n          this.house = house;\n        }, (error: any) => {\n          console.error('Error loading house for details view:', error);\n        }\n      );\n  }\n\n  isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n\n  onSubmit() {\n    console.log(\"ReservationCreate form submitted:\");\n    console.log(this.reservationForm);\n\n    if (this.authService.isAuthenticated()) {\n      const houseId = this.house.HouseId;\n      const newReservation = { houseId, ...this.reservationForm.value };\n\n      this._reservationService.createReservation(newReservation)\n        .subscribe(response => {\n          if (response.success) {\n            console.log(response.message);\n            this._router.navigate(['/reservations']);\n          } else {\n            console.log('Reservation creation failed');\n          }\n        });\n    } else {\n      // Redirect to login page if the user is not authenticated\n      this._router.navigate(['/login']);\n    }\n  }\n\n  backToHouses() {\n    this._router.navigate(['/houses']);\n  }\n\n  calculateNumberOfDays() {\n    const checkInDateStr = this.reservationForm?.get('checkInDate')?.value;\n    const checkOutDateStr = this.reservationForm?.get('checkOutDate')?.value;\n\n    if (checkInDateStr && checkOutDateStr) {\n      const checkInDate = new Date(checkInDateStr);\n      const checkOutDate = new Date(checkOutDateStr);\n\n      if (!isNaN(checkInDate.getTime()) && !isNaN(checkOutDate.getTime())) {\n        const timeDiff = checkOutDate.getTime() - checkInDate.getTime();\n        const numberOfDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        this.numberOfDays = numberOfDays;\n        this.totalPrice = this.house?.PricePerNight * numberOfDays;\n      } else {\n        console.error('Invalid date strings');\n      }\n    } else {\n      console.error('Invalid date strings');\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  }\n\n  ngOnInit(): void {\n    this.currentDate = this.formatDate(new Date());\n    this.checkIn = this.currentDate;\n    this.reservationForm.get('checkInDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkIn = this.reservationForm?.get('checkInDate')?.value;\n      const checkInDate = this.reservationForm?.get('checkInDate')?.value as Date;\n      const checkOutDate = this.reservationForm?.get('checkOutDate')?.value as Date;\n      if (checkOutDate < checkInDate) {\n        this.reservationForm.get('checkOutDate')?.setValue(this.checkIn);\n      }\n    });\n\n    this.reservationForm.get('checkOutDate')?.valueChanges.subscribe(() => {\n      this.calculateNumberOfDays();\n      this.checkOut = this.reservationForm.get('checkOutDate')?.value;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}